Smart Files Feature Summary

== CURRENT IMPLEMENTATION ==

A. Architecture & Design
- Pattern: MVVM (Model-View-ViewModel) for a clean separation of concerns.
- State Management: Utilizes SwiftUI's ObservableObject and the Combine framework for reactive state.
- Communication: Employs NotificationCenter (specifically .didChangeFileData) for decoupled state updates across components.
- Theming: Driven by a protocol-based theme engine (FilesTheme) that provides a single source of truth for UI styling (colors, fonts, layout), ensuring a consistent and maintainable look inspired by Linear/Raycast.
- Persistence: Uses a sandboxed file system approach within the app's Application Support directory, separating raw file assets (/files) from their Codable-serialized JSON metadata (/metadata) for fast querying.

B. Core Components & Functionality
- Models:
    - FileItem: Central model for files/folders, containing all metadata.
    - Tag: Model for categorizing files.
- ViewModels:
    - SidebarViewModel: Manages sidebar state and selection.
    - FileBrowserViewModel: Manages the collection of files, selection, and CRUD operations.
    - DetailsViewModel: Manages the state for the details/preview pane.
- Views:
    - FilesMainView: Top-level container assembling the three main panes.
    - SidebarView, FileCardView, DetailsView: Custom-built, highly-styled components with hover/selection states, replacing generic SwiftUI views.
    - TagManagementView: A themed popover for managing tags.
- Services:
    - InAppFileStorageManager: Handles all file system interactions.
    - NotificationService: Provides non-intrusive, toast-style user notifications.
- Key Workflows:
    - File Import: Supports drag-and-drop import and creates associated metadata.
    - Hierarchical Navigation: Breadcrumbs and folder filtering allow navigation through subfolders.
    - File Manipulation: Inline rename, duplicate, move and delete operations with batch support.
    - Search & Filtering: Debounced search with filtering by type, tags and date.
    - Favorites: Files can be marked as favorites for quick access.
    - Rich Previews: Text, image and PDF previews are available in the details pane.
    - File Creation: Quick actions to generate empty files and a template picker sheet for Swift, Markdown and text files.
    - Security: Optional Face ID/passcode protection for sensitive items.

== REMAINING GAPS ==

- Undo/Redo: Only partial undo support for batch operations; a full history stack is not yet implemented.
- State Persistence: UI state (window size, selections, layout mode) is not saved across launches.
- Keyboard Shortcuts: Many actions lack dedicated shortcuts for power users.
- Recents Tracking: "Recents" smart group now lists the 20 most recently modified files.
- Editing: Previews are read-only and lack editing or syntax highlighting for code files.
